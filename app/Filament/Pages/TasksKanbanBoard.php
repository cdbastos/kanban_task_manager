<?php

namespace App\Filament\Pages;

use App\Enums\TaskStatus;
use App\Models\Task;
use Filament\Actions\CreateAction;
use Illuminate\Support\Collection;
use Mokhosh\FilamentKanban\Pages\KanbanBoard;

class TasksKanbanBoard extends KanbanBoard
{

    protected static ?string $title = 'GestiÃ³n de Tareas';

    protected static string $model = Task::class;
    protected static string $statusEnum = TaskStatus::class;

    protected bool $editModalSlideOver = true;

    protected string $editModalTitle = 'Modificar Tarea';

    protected string $editModalSaveButtonLabel = 'Guardar';

    protected string $editModalCancelButtonLabel = 'Cancelar';


    protected function records(): Collection
    {
        return Task::latest('updated_at')
            ->whereUserId(auth()->id())
            ->get(); // TODO: Change the autogenerated stub
    }

    public function onStatusChanged(int $recordId, string $status, array $fromOrderedIds, array $toOrderedIds): void
    {
        Task::find($recordId)->update(['status' => $status]);
        Task::setNewOrder($toOrderedIds);
    }

    public function onSortChanged(int $recordId, string $status, array $orderedIds): void
    {
        Task::setNewOrder($orderedIds);
    }

    protected function getEditModalFormSchema(null|int $recordId): array
    {
        return Task::getForm();
    }

    protected function getHeaderActions(): array
    {
        return [
            CreateAction::make()
                ->model(Task::class)
                ->form(Task::getForm())
                ->slideOver()
                ->modalHeading('Crear Tarea')
                ->mutateFormDataUsing(function ($data) {
                    $data['user_id'] = auth()->id();

                    return $data;
                })
                ->modalSubmitActionLabel('Crear')
                ->modalCancelActionLabel('Cancelar')
                ->createAnother(false)
                ->label('Crear Tarea')
        ];
    }


//    protected function getEditModalRecordData(int $recordId, array $data): array
//    {
//        dd($recordId, $data);
//    }
//
//    protected function editRecord(int $recordId, array $data, array $state): void
//    {
//        dd($recordId, $data, $state);
//    }

}
